import torch
import torchvision
import subprocess
import sys

def get_repo_name():
    try:
        output = subprocess.check_output("git rev-parse --show-toplevel".split()).strip()
        output = subprocess.check_output(f"basename {output}".split()).strip()
    except:
        return "No git repository" 
    return output.decode("utf-8")[:-1] 

def get_hash_tag():
    try:
        short_hash = subprocess.check_output("git rev-parse --short HEAD".split()).strip().decode("utf-8")
        dirty = subprocess.check_output("git status".split()).decode("utf8")
        dirty = "" if dirty.find("modified") < 0 else "-dirty"
    except:
        return ""
    return f"{short_hash}{dirty}" 

def print_config_info(args):
    
    print("-"*20)
    print(f"VERSIONING")
    print("-"*20)
    print(f"GIT: {get_repo_name()}:{get_hash_tag()}") 
    print(f"PYTHON: {sys.version}")
    print(f"TORCH: {torch.__version__}")
    print(f"TORCHVISION: {torchvision.__version__}")
    print(f"CUDA: {torch.cuda.is_available()}")
    print(f"N_GPU: {torch.cuda.device_count()}") 

    print("-"*20)
    print("")
    
    print("-"*20)
    print("PARAMETERS")
    print("-"*20)
    for arg in vars(args):
        obj = getattr(args, arg)
        if type(obj) == tuple:
            obj = ','.join(map(str, obj)) 
        if obj is None:
            obj = "None"
        
        try:
            print(f"{arg:<20} {obj:>}")
        except:
            print(f"{arg:<20} {obj}")
    print("-"*20)
    print("", flush=True)